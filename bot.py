import json
from aiogram import Bot, executor, types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold, hlink

from config import token

bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    await message.answer('–í–ø–µ—Ä–µ–¥ –∑–∞ —Å–∫–∏–¥–∫–∞–º–∏!!!')
    start_buttons = ['–ù–æ–≤–æ–º–∏—Ö–∞–π–ª–æ–≤—Å–∫–∏–π', '–û–ª–≥–∏–Ω–∫–∞', '–î–∂—É–±–≥–∞', '–õ–µ—Ä–º–æ–Ω—Ç–æ–≤–æ']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)
    await message.answer('–ì–¥–µ –∏—Å–∫–∞—Ç—å?', reply_markup=keyboard)


@dp.message_handler(Text(equals='–ù–æ–≤–æ–º–∏—Ö–∞–π–ª–æ–≤—Å–∫–∏–π'))
async def novomix_city(message: types.Message):
    await message.answer('–ñ–¥–∏—Ç–µ...')
    with open('Novomikhailovski.json', encoding="utf-8") as file:
        price = json.load(file)

    for k, v in sorted(price.items()):
        sales = f'{hbold(v["card_discount"])} ü•ä\n\n' \
                f'{hbold(v["card_sale_date"])}\n\n' \
                f'{hlink(v["card_title_2"], v["card_img"])}\n\n' \
                f'–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ --  {v["card_old_price"]} —Ä—É–±.,\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞ --  {hbold(v["card_price"])} —Ä—É–±.\n'

        await message.answer(sales)


@dp.message_handler(Text(equals='–û–ª–≥–∏–Ω–∫–∞'))
async def olginka_city(message: types.Message):
    await message.answer('–ñ–¥–∏—Ç–µ...')
    with open('olginka.json', encoding="utf-8") as file:
        price = json.load(file)

    for k, v in sorted(price.items()):
        sales = f'{hbold(v["card_discount"])} ü•ä\n\n' \
                f'{hbold(v["card_sale_date"])}\n\n' \
                f'{hlink(v["card_title_2"], v["card_img"])}\n\n' \
                f'–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ --  {v["card_old_price"]} —Ä—É–±.,\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞ --  {hbold(v["card_price"])} —Ä—É–±.\n'

        await message.answer(sales)


@dp.message_handler(Text(equals='–î–∂—É–±–≥–∞'))
async def dzhubga_city(message: types.Message):
    await message.answer('–ñ–¥–∏—Ç–µ...')
    with open('Dzubga.json', encoding="utf-8") as file:
        price = json.load(file)

    for k, v in sorted(price.items())[-5:]:
        sales = f'{hbold(v["card_discount"])} ü•ä\n\n' \
                f'{hbold(v["card_sale_date"])}\n\n' \
                f'{hlink(v["card_title_2"], v["card_img"])}\n\n' \
                f'–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ --  {v["card_old_price"]} —Ä—É–±.,\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞ --  {hbold(v["card_price"])} —Ä—É–±.\n'

        await message.answer(sales)


@dp.message_handler(Text(equals='–õ–µ—Ä–º–æ–Ω—Ç–æ–≤–æ'))
async def lermontovo_city(message: types.Message):
    await message.answer('–ñ–¥–∏—Ç–µ...')
    with open('Lermontovo.json', encoding="utf-8") as file:
        price = json.load(file)

    for k, v in sorted(price.items()):
        sales = f'{hbold(v["card_discount"])} ü•ä\n\n' \
                f'{hbold(v["card_sale_date"])}\n\n' \
                f'{hlink(v["card_title_2"], v["card_img"])}\n\n' \
                f'–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ --  {v["card_old_price"]} —Ä—É–±.,\n –ù–æ–≤–∞—è —Ü–µ–Ω–∞ --  {hbold(v["card_price"])} —Ä—É–±.\n'

        await message.answer(sales)


if __name__ == '__main__':
    executor.start_polling(dp)
